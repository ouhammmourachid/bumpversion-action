# descripption of the action
name: 'Github Action for Bumpversion'
description: 'bumpversion action for bumping the version of the project .'
author: 'rachid ouhammou'
branding:
  icon: 'chevrons-up'
  color: 'blue'

# inputs of the action
inputs:

  bump-type:
    description: 'the type of the bump version .'
    required: true
    default: 'patch'
    options: ['major', 'minor', 'patch']

  branch:
    description: 'the branch to push the changes to .'
    required: true
    default: 'main'

  github-token:
    description: 'the github token to use for the git push .'
    required: false
    secret: true
    default: ${{ github.token }}

  release-title:
    description: 'the title of the release .'
    required: false
    default: ''

  generate-notes:
    description: 'generate notes for the release .'
    required: false
    default: true

# outputs of the action
outputs:
  new-version:
    description: 'the new version after the bump version .'
    value: ${{ steps.bump.outputs.new_version }}

  old-version:
    description: 'the old version before the bump version .'
    value: ${{ steps.bump.outputs.old_version }}


# runs of the action
runs:
  using: 'composite'
  steps:

    - name: check if poetry file exists
    # Check if the pyproject.toml file exists and set  bool value to true if it does to use it in the next step
      run: ${{ github.action_path }}/scripts/check-poetry-exist.sh
      shell: bash

    - name: Set up Python environment
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.python_version }}

    - name: Upgrade pip & Install Poetry.
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        pip install bumpver
      shell: bash

    - name: Setup poetry
      if : ${{ env.poetry_exist == 'false' }}
      run: ${{ github.action_path }}/scripts/setup-poetry.sh
      shell: bash

    - name: Bump version
      id: bump
      run: |
        echo "old_version=$(poetry version -s)" >> $GITHUB_OUTPUT
        echo "old_version=$(poetry version -s)" >> $GITHUB_ENV
        poetry run bumpver update -n --${{ inputs.bump-type }}
        echo "new_version=$(poetry version -s)" >> $GITHUB_OUTPUT
        echo "new_version=$(poetry version -s)" >> $GITHUB_ENV
        echo "major_version=$(poetry version -s | cut -d. -f1)" >> $GITHUB_ENV
      shell: bash

    - name: clean up if poetry file does not exist
      if: ${{ env.poetry_exist == 'false' }}
      run: |
        rm -f poetry.lock
        rm -f pyproject.toml
      shell: bash

    - name: Commit and push changes
      uses: actions-js/push@master
      with:
        branch: ${{ inputs.branch }}
        github_token: ${{ inputs.github-token }}
        message: "Bump version from ${{ env.old_version }} ‚ü∂ ${{ env.new_version }}"

    - name: Create release with generated notes
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        tag: "v${{env.new_version}}"
        title: ${{ inputs.release-title }}
      if : ${{ inputs.generate-notes=='true' }}
      run: |
        gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${title} v${tag#v}" \
            --generate-notes
      shell: bash

    - name: Create release without generated notes
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        tag: "v${{env.new_version}}"
        title: ${{ inputs.release-title }}
      if : ${{ inputs.generate-notes=='false' }}
      run: |
        gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${title} v${tag#v}"
      shell: bash

    - name: retage for the major version
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        major_tag: "v${{env.major_version}}"
      run: |
        gh release delete "$major_tag" \
            --repo="$GITHUB_REPOSITORY"
        gh release create "$major_tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${title} v${major_tag#v}"
      shell: bash
